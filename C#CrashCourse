//Rextester.Program.Main is the entry point for your code. Don't change it.
//Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //variables hold data, int hold integer data, float and double hold numbers with deciaml points
            //double uses twice as much memory to store float, it can hold larger value ranges
            //string hold text, bool can be set true or false
            //lower case f next to 3.14 signals it being a float
            //cannot use f, there isn't room to store double in float
            //remove the f
            //change all to var, unity can determine the type based on the value typed after var
            //replace var with bool on likesPizza, it's an inferred type
            //arrays are constructs that hold multiple values
            //creates a list, all accessible from variable writers
            //created an array that holds 5 items from the list
            //new creates an instance of the array of strings
            //writers[0] replaces the first string in the array with another string
            //
            
            //Your code goes here
            Console.WriteLine("Hello, world!");
            
            var meaningOfLife = 42;
            var smallPi = 3.14;
            var bigPi = 3.14159265359;
            var vaporWare = "Half Life 3";
            const bool likesPizza = true;
            
            string[] writers = {"Anthony","Brian","Eric","Sean"};
            string[] editors = new string[5];
            Console.WriteLine(writers[2]);
            writers[0] = "Ray";
            
            //if (likesPizza == false)
            //{
                //Console.WriteLine("You Monster!");
                //bool isMonster = (likesPizza == true)?false:true;
           // }
            
            //for(int i=0; i <writers.Length; i++)
            //{
                //string writer = writers[i];
                //Console.WriteLine(writer);
            //}
            
            foreach (string writer in writers)
            {
                Console.WriteLine(writer);
            }
            if(meaningOfLife == 42)
            {
                bool inScope = true;
            }
            
            
            //starting Structures and Classes
            Point2D myPoint = new Point2D();
                //this creates a new struct object
            
             myPoint.X = 10;
             myPoint.Y = 20;
                //these are the properties of Point2D
                //the way to access the properties is through the dot operatpr followed by the property name, after which you can assign the value
                //defined the state of the object, now you can add the behaviour
                //this is done by creating methods
             Point2D anotherPoint = new Point2D();
             anotherPoint.X = 5;
             anotherPoint.Y = 15;
            
            myPoint.AddPoint(anotherPoint);
            
            Console.WriteLine(myPoint.X);
            Console.WriteLine(myPoint.Y);
            
            //Classes start here
            Point2D yetAnotherPoint = myPoint;
            yetAnotherPoint.X =100;
            //this assigns and new Point2D object by assigning an exsisting point2d object to a vairable
            //then changed the property of x
            
            Console.WriteLine(myPoint.X);
            Console.WriteLine(yetAnotherPoint.X);
            
            Point2DRef pointRef = new Point2DRef();
            pointRef.X = 20;
            Point2DRef anotherRef = pointRef;
            anotherRef.X = 25;
                //this code creates an instance of the point2dref object, then assigns a value to the x
                //then the x is assigned another ref, which is changed to 25
                //next line prints those changes
            Console.WriteLine(pointRef.X);
            Console.WriteLine(anotherRef.X);
            //two references of the same object, change one, it changes both
            
            pointRef = null;
            //the variable point ref is no longer accessible, but the object is still in the memory
            anotherRef.X = 125;
            Console.WriteLine(anotherRef.X);
            
            anotherRef = null;
            //becomes a garbage collector
            
            RenFairePerson person = new RenFairePerson();
            person.Name = "Igor the Ratcatcher";
            person.SayHello();
            //first you set the name of the person
            //this property is obtained from perent class
            //then you override SayHello
            


        }
    }
    
    struct Point2D
    {
            public int X;
            public int Y;
                    
        public void AddPoint(Point2D anotherPoint)
        {
                   
            //void indicates the return of the method, which is nothing
            //the paraentheis contains the parameters being passed into the method
            //the method below is meant to add two different points together
            this.X = this.X + anotherPoint.X;
            this.Y = this.Y + anotherPoint.Y;
        }
    }
    
    class Point2DRef
    {
        public int X;
        public int Y;
        
        public void AddPoint(Point2DRef anotherPoint)
        {
            this.X = this.X + anotherPoint.X;
            this.Y = this.Y + anotherPoint.Y;
            //we are increasing the current objects x and y values with the equivalent x and y variables from another Point2D object
        }
        //class is a reference type, exists in heap
        //heap is long term memory
        //example, player character
    }
    
    class Person
    {
        public string Name;
        public virtual void SayHello()
        {
            Console.WriteLine("Hello");
        }
        //this class contains a Name as well as a method named SayHello()
        //using virtual because a sub-class will override, reimplement the method to provide specialized behaviour
    }
    
    class RenFairePerson:Person
    {
        public override void SayHello()
        {
            base.SayHello();
            //this calls out the parent method, it prints hello then huzzah
            Console.Write("Huzzah!");
        }
        //RenFairePerson extends person
        //colon after person indicates a super class
        //next, the class implements SayHello, it is overriding the parent method by the override keyword
    }


}
